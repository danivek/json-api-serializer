{"version":3,"file":"json-api-serializer.min.js","sources":["../node_modules/setimmediate/setImmediate.js","../lib/lru-cache.js","../lib/helpers.js","../lib/validator.js","../lib/JSONAPISerializer.js"],"sourcesContent":["(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6â€“8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/* eslint-disable */\n\n// Influenced by http://jsfiddle.net/2baax9nk/5/\n\nclass Node {\n  constructor(key, data) {\n    this.key = key;\n    this.data = data;\n    this.previous = null;\n    this.next = null;\n  }\n}\n\nmodule.exports = class LRU {\n  constructor(capacity) {\n    this.capacity = capacity === 0 ? Infinity : capacity;\n    this.map = {};\n    this.head = null;\n    this.tail = null;\n  }\n\n  get(key) {\n    // Existing item\n    if (this.map[key] !== undefined) {\n      // Move to the first place\n      const node = this.map[key];\n      this._moveFirst(node);\n\n      // Return\n      return node.data;\n    }\n\n    // Not found\n    return undefined;\n  }\n\n  set(key, value) {\n    // Existing item\n    if (this.map[key] !== undefined) {\n      // Move to the first place\n      const node = this.map[key];\n      node.data = value;\n      this._moveFirst(node);\n      return;\n    }\n\n    // Ensuring the cache is within capacity\n    if (Object.keys(this.map).length >= this.capacity) {\n      const id = this.tail.key;\n      this._removeLast();\n      delete this.map[id];\n    }\n\n    // New Item\n    const node = new Node(key, value);\n    this._add(node);\n    this.map[key] = node;\n  }\n\n  _add(node) {\n    node.next = null;\n    node.previous = node.next;\n\n    // first item\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n    } else {\n      // adding to existing items\n      this.head.previous = node;\n      node.next = this.head;\n      this.head = node;\n    }\n  }\n\n  _remove(node) {\n    // only item in the cache\n    if (this.head === node && this.tail === node) {\n      this.tail = null;\n      this.head = this.tail;\n      return;\n    }\n\n    // remove from head\n    if (this.head === node) {\n      this.head.next.previous = null;\n      this.head = this.head.next;\n      return;\n    }\n\n    // remove from tail\n    if (this.tail === node) {\n      this.tail.previous.next = null;\n      this.tail = this.tail.previous;\n      return;\n    }\n\n    // remove from middle\n    node.previous.next = node.next;\n    node.next.previous = node.previous;\n  }\n\n  _moveFirst(node) {\n    this._remove(node);\n    this._add(node);\n  }\n\n  _removeLast() {\n    this._remove(this.tail);\n  }\n};\n","/* eslint-disable no-sequences */\n/* eslint-disable no-return-assign */\n\nconst LRU = require('./lru-cache');\n\n// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_get\nconst get = (obj, path, defaultValue) => {\n  const result = String.prototype.split\n    .call(path, /[,[\\].]+?/)\n    .filter(Boolean)\n    .reduce((res, key) => (res !== null && res !== undefined ? res[key] : res), obj);\n  return result === undefined || result === obj ? defaultValue : result;\n};\n\n// https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method\nconst set = (obj, path, value) => {\n  if (Object(obj) !== obj) return obj; // When obj is not an object\n  // If not yet an array, get the keys from the string-path\n  if (!Array.isArray(path)) path = path.toString().match(/[^.[\\]]+/g) || [];\n  path.slice(0, -1).reduce(\n    (\n      a,\n      c,\n      i // Iterate all of them except the last one\n    ) =>\n      Object(a[c]) === a[c] // Does the key exist and is its value an object?\n        ? // Yes: then follow that path\n          a[c]\n        : // No: create the key. Is the next key a potential array-index?\n          (a[c] =\n            // eslint-disable-next-line no-bitwise\n            Math.abs(path[i + 1]) >> 0 === +path[i + 1]\n              ? [] // Yes: assign a new array object\n              : {}), // No: assign a new plain object\n    obj\n  )[path[path.length - 1]] = value; // Finally assign the value to the last key\n  return obj; // Return the top-level object to allow chaining\n};\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/pick.md\nconst pick = (obj, arr) =>\n  arr.reduce((acc, curr) => (curr in obj && (acc[curr] = obj[curr]), acc), {});\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/isEmpty.md\nconst isEmpty = (val) => val == null || !(Object.keys(val) || val).length;\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/omit.md\nconst omit = (obj, arr) =>\n  Object.keys(obj)\n    .filter((k) => !arr.includes(k))\n    .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/isObjectLike.md\nconst isObjectLike = (val) => val !== null && typeof val === 'object';\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/isPlainObject.md\nconst isPlainObject = (val) => !!val && typeof val === 'object' && val.constructor === Object;\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/transform.md\nconst transform = (obj, fn, acc) => Object.keys(obj).reduce((a, k) => fn(a, obj[k], k, obj), acc);\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/toKebabCase.md\nconst toKebabCase = (str) =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map((x) => x.toLowerCase())\n    .join('-');\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/toSnakeCase.md\nconst toSnakeCase = (str) =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map((x) => x.toLowerCase())\n    .join('_');\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/toCamelCase.md\nconst toCamelCase = (str) => {\n  const s =\n    str &&\n    str\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n      .map((x) => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase())\n      .join('');\n  return s.slice(0, 1).toLowerCase() + s.slice(1);\n};\n\nmodule.exports = {\n  get,\n  set,\n  pick,\n  isEmpty,\n  omit,\n  isPlainObject,\n  isObjectLike,\n  transform,\n  toKebabCase,\n  toSnakeCase,\n  toCamelCase,\n  LRU,\n};\n","/**\n * Validate and apply default values to resource's configuration options.\n *\n * @function validateOptions\n * @private\n * @param {object} options Configuration options.\n * @returns {object} valid configuration options.\n */\nfunction validateOptions(options) {\n  options = {\n    id: 'id',\n    blacklist: [],\n    whitelist: [],\n    links: {},\n    relationships: {},\n    topLevelLinks: {},\n    topLevelMeta: {},\n    meta: {},\n    blacklistOnDeserialize: [],\n    whitelistOnDeserialize: [],\n    jsonapiObject: true,\n    ...options,\n  };\n\n  if (!Array.isArray(options.blacklist)) throw new Error(\"option 'blacklist' must be an array\");\n  if (!Array.isArray(options.whitelist)) throw new Error(\"option 'whitelist' must be an array\");\n  if (typeof options.links !== 'object' && typeof options.links !== 'function')\n    throw new Error(\"option 'links' must be an object or a function\");\n  if (!Array.isArray(options.blacklistOnDeserialize))\n    throw new Error(\"option 'blacklistOnDeserialize' must be an array\");\n  if (!Array.isArray(options.whitelistOnDeserialize))\n    throw new Error(\"option 'whitelistOnDeserialize' must be an array\");\n  if (\n    options.topLevelLinks &&\n    typeof options.topLevelLinks !== 'object' &&\n    typeof options.topLevelLinks !== 'function'\n  )\n    throw new Error(\"option 'topLevelLinks' must be an object or a function\");\n  if (\n    options.topLevelMeta &&\n    typeof options.topLevelMeta !== 'object' &&\n    typeof options.topLevelMeta !== 'function'\n  )\n    throw new Error(\"option 'topLevelMeta' must be an object or a function\");\n  if (options.meta && typeof options.meta !== 'object' && typeof options.meta !== 'function')\n    throw new Error(\"option 'meta' must be an object or a function\");\n  if (typeof options.jsonapiObject !== 'boolean')\n    throw new Error(\"option 'jsonapiObject' must a boolean\");\n  if (\n    options.convertCase &&\n    !['kebab-case', 'snake_case', 'camelCase'].includes(options.convertCase)\n  )\n    throw new Error(\"option 'convertCase' must be one of 'kebab-case', 'snake_case', 'camelCase'\");\n\n  if (\n    options.unconvertCase &&\n    !['kebab-case', 'snake_case', 'camelCase'].includes(options.unconvertCase)\n  )\n    throw new Error(\n      \"option 'unconvertCase' must be one of 'kebab-case', 'snake_case', 'camelCase'\"\n    );\n\n  if (options.beforeSerialize && typeof options.beforeSerialize !== 'function')\n    throw new Error(\"option 'beforeSerialize' must be function\");\n\n  if (options.afterDeserialize && typeof options.afterDeserialize !== 'function')\n    throw new Error(\"option 'afterDeserialize' must be function\");\n\n  const { relationships } = options;\n  Object.keys(relationships).forEach((key) => {\n    relationships[key] = {\n      schema: 'default',\n      links: {},\n      meta: {},\n      ...relationships[key],\n    };\n\n    if (!relationships[key].type)\n      throw new Error(`option 'type' for relationship '${key}' is required`);\n    if (\n      typeof relationships[key].type !== 'string' &&\n      typeof relationships[key].type !== 'function'\n    )\n      throw new Error(`option 'type' for relationship '${key}' must be a string or a function`);\n    if (relationships[key].alternativeKey && typeof relationships[key].alternativeKey !== 'string')\n      throw new Error(`option 'alternativeKey' for relationship '${key}' must be a string`);\n\n    if (relationships[key].schema && typeof relationships[key].schema !== 'string')\n      throw new Error(`option 'schema' for relationship '${key}' must be a string`);\n\n    if (\n      typeof relationships[key].links !== 'object' &&\n      typeof relationships[key].links !== 'function'\n    )\n      throw new Error(`option 'links' for relationship '${key}' must be an object or a function`);\n\n    if (\n      typeof relationships[key].meta !== 'object' &&\n      typeof relationships[key].meta !== 'function'\n    )\n      throw new Error(`option 'meta' for relationship '${key}' must be an object or a function`);\n\n    if (relationships[key].deserialize && typeof relationships[key].deserialize !== 'function')\n      throw new Error(`option 'deserialize' for relationship '${key}' must be a function`);\n  });\n\n  return options;\n}\n\n/**\n * Validate and apply default values to the dynamic type object option.\n *\n * @function validateDynamicTypeOptions\n * @private\n * @param {object} options dynamic type object option.\n * @returns {object} valid dynamic type options.\n */\nfunction validateDynamicTypeOptions(options) {\n  options = { topLevelLinks: {}, topLevelMeta: {}, jsonapiObject: true, ...options };\n\n  if (!options.type) throw new Error(\"option 'type' is required\");\n  if (typeof options.type !== 'string' && typeof options.type !== 'function') {\n    throw new Error(\"option 'type' must be a string or a function\");\n  }\n\n  if (\n    options.topLevelLinks &&\n    typeof options.topLevelLinks !== 'object' &&\n    typeof options.topLevelLinks !== 'function'\n  )\n    throw new Error(\"option 'topLevelLinks' must be an object or a function\");\n  if (\n    options.topLevelMeta &&\n    typeof options.topLevelMeta !== 'object' &&\n    typeof options.topLevelMeta !== 'function'\n  )\n    throw new Error(\"option 'topLevelMeta' must be an object or a function\");\n  if (options.meta && typeof options.meta !== 'object' && typeof options.meta !== 'function')\n    throw new Error(\"option 'meta' must be an object or a function\");\n  if (typeof options.jsonapiObject !== 'boolean')\n    throw new Error(\"option 'jsonapiObject' must a boolean\");\n\n  return options;\n}\n\n/**\n * Validate a JSONAPI error object\n *\n * @function validateError\n * @private\n * @param {object} err a JSONAPI error object\n * @returns {object} JSONAPI  valid error object\n */\nfunction validateError(err) {\n  if (typeof err !== 'object') {\n    throw new Error('error must be an object');\n  }\n\n  const { id, links, status, code, title, detail, source, meta } = err;\n\n  const isValidLink = function isValidLink(linksObj) {\n    if (typeof linksObj !== 'object') {\n      throw new Error(\"error 'link' property must be an object\");\n    }\n\n    Object.keys(linksObj).forEach((key) => {\n      if (typeof linksObj[key] !== 'object' && typeof linksObj[key] !== 'string') {\n        throw new Error(`error 'links.${key}' must be a string or an object`);\n      }\n\n      if (typeof linksObj[key] === 'object') {\n        if (linksObj[key].href && typeof linksObj[key].href !== 'string') {\n          throw new Error(`'links.${key}.href' property must be a string`);\n        }\n\n        if (linksObj[key].meta && typeof linksObj[key].meta !== 'object') {\n          throw new Error(`'links.${key}.meta' property must be an object`);\n        }\n      }\n    });\n\n    return links;\n  };\n\n  const isValidSource = function isValidSource(sourceObj) {\n    if (typeof sourceObj !== 'object') {\n      throw new Error(\"error 'source' property must be an object\");\n    }\n\n    if (sourceObj.pointer && typeof sourceObj.pointer !== 'string') {\n      throw new Error(\"error 'source.pointer' property must be a string\");\n    }\n\n    if (sourceObj.parameter && typeof sourceObj.parameter !== 'string') {\n      throw new Error(\"error 'source.parameter' property must be a string\");\n    }\n\n    return source;\n  };\n\n  const error = {};\n  if (id) error.id = id.toString();\n  if (links) error.links = isValidLink(links);\n  if (status) error.status = status.toString();\n  if (code) error.code = code.toString();\n  if (title) error.title = title.toString();\n  if (detail) error.detail = detail.toString();\n  if (source) error.source = isValidSource(source);\n  if (meta) error.meta = meta;\n\n  return error;\n}\n\nmodule.exports = {\n  validateOptions,\n  validateDynamicTypeOptions,\n  validateError,\n};\n","require('setimmediate');\n\nconst {\n  pick,\n  isEmpty,\n  omit,\n  isPlainObject,\n  isObjectLike,\n  transform,\n  get,\n  set,\n  toCamelCase,\n  toKebabCase,\n  toSnakeCase,\n  LRU,\n} = require('./helpers');\n\nconst { validateOptions, validateDynamicTypeOptions, validateError } = require('./validator');\n\n/**\n * JSONAPISerializer class.\n *\n * @example\n * const JSONAPISerializer = require('json-api-serializer');\n *\n * // Create an instance of JSONAPISerializer with default settings\n * const serializer = new JSONAPISerializer();\n *\n * @class JSONAPISerializer\n * @param {object} [opts] Global options.\n */\nmodule.exports = class JSONAPISerializer {\n  constructor(opts) {\n    this.opts = opts || {};\n    this.schemas = {};\n\n    // Size of cache used for convertCase, 0 results in an infinitely sized cache\n    const { convertCaseCacheSize = 5000 } = this.opts;\n    // Cache of strings to convert to their converted values per conversion type\n    this.convertCaseMap = {\n      camelCase: new LRU(convertCaseCacheSize),\n      kebabCase: new LRU(convertCaseCacheSize),\n      snakeCase: new LRU(convertCaseCacheSize),\n    };\n  }\n\n  /**\n   * Register a resource with its type, schema name, and configuration options.\n   *\n   * @function JSONAPISerializer#register\n   * @param {string} type resource's type.\n   * @param {string|object} [schema='default'] schema name.\n   * @param {object} [options] options.\n   */\n  register(type, schema, options) {\n    if (typeof schema === 'object') {\n      options = schema;\n      schema = 'default';\n    }\n\n    schema = schema || 'default';\n    options = { ...this.opts, ...options };\n\n    this.schemas[type] = this.schemas[type] || {};\n    this.schemas[type][schema] = validateOptions(options);\n  }\n\n  /**\n   * Serialze input data to a JSON API compliant response.\n   * Input data can be a simple object or an array of objects.\n   *\n   * @see {@link http://jsonapi.org/format/#document-top-level}\n   * @function JSONAPISerializer#serialize\n   * @param {string|object} type resource's type as string or a dynamic type options as object.\n   * @param {object|object[]} data input data.\n   * @param {string|object} [schema='default'] resource's schema name.\n   * @param {object} [extraData] additional data that can be used in topLevelMeta options.\n   * @param {boolean} [excludeData] boolean that can be set to exclude the `data` property in serialized data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {object} serialized data.\n   */\n  serialize(type, data, schema, extraData, excludeData, overrideSchemaOptions = {}) {\n    // Support optional arguments (schema)\n    if (arguments.length === 3) {\n      if (typeof schema === 'object') {\n        extraData = schema;\n        schema = 'default';\n      }\n    }\n\n    schema = schema || 'default';\n    extraData = extraData || {};\n\n    const included = new Map();\n    const isDynamicType = typeof type === 'object';\n    let options;\n\n    if (isDynamicType) {\n      // Dynamic type option\n      options = validateDynamicTypeOptions(type);\n    } else {\n      // Serialize data with the defined type\n      if (!this.schemas[type]) {\n        throw new Error(`No type registered for ${type}`);\n      }\n\n      if (schema && !this.schemas[type][schema]) {\n        throw new Error(`No schema ${schema} registered for ${type}`);\n      }\n\n      options = this.schemas[type][schema];\n    }\n\n    const overrideType = isDynamicType ? type.type : type;\n    if (overrideSchemaOptions[overrideType]) {\n      // Merge default (registered) options and extra options into new options object\n      options = { ...options, ...overrideSchemaOptions[overrideType] };\n    }\n\n    let dataProperty;\n\n    if (excludeData) {\n      dataProperty = undefined;\n    } else if (isDynamicType) {\n      dataProperty = this.serializeMixedResource(\n        options,\n        data,\n        included,\n        extraData,\n        overrideSchemaOptions\n      );\n    } else {\n      dataProperty = this.serializeResource(\n        type,\n        data,\n        options,\n        included,\n        extraData,\n        overrideSchemaOptions\n      );\n    }\n\n    return {\n      jsonapi: options.jsonapiObject ? { version: '1.0' } : undefined,\n      meta: this.processOptionsValues(data, extraData, options.topLevelMeta, 'extraData'),\n      links: this.processOptionsValues(data, extraData, options.topLevelLinks, 'extraData'),\n      data: dataProperty,\n      included: included.size ? [...included.values()] : undefined,\n    };\n  }\n\n  /**\n   * Asynchronously serialize input data to a JSON API compliant response.\n   * Input data can be a simple object or an array of objects.\n   *\n   * @see {@link http://jsonapi.org/format/#document-top-level}\n   * @function JSONAPISerializer#serializeAsync\n   * @param {string|object} type resource's type or an object with a dynamic type resolved from data..\n   * @param {object|object[]} data input data.\n   * @param {string} [schema='default'] resource's schema name.\n   * @param {object} [extraData] additional data that can be used in topLevelMeta options.\n   * @param {boolean} [excludeData] boolean that can be set to exclude the `data` property in serialized data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {Promise} resolves with serialized data.\n   */\n  serializeAsync(type, data, schema, extraData, excludeData, overrideSchemaOptions = {}) {\n    // Support optional arguments (schema)\n    if (arguments.length === 3) {\n      if (typeof schema === 'object') {\n        extraData = schema;\n        schema = 'default';\n      }\n    }\n\n    schema = schema || 'default';\n    extraData = extraData || {};\n\n    const included = new Map();\n    const isDataArray = Array.isArray(data);\n    const isDynamicType = typeof type === 'object';\n    const arrayData = isDataArray ? data : [data];\n    const serializedData = [];\n    const that = this;\n    let i = 0;\n    let options;\n\n    if (isDynamicType) {\n      options = validateDynamicTypeOptions(type);\n    } else {\n      if (!this.schemas[type]) {\n        throw new Error(`No type registered for ${type}`);\n      }\n\n      if (schema && !this.schemas[type][schema]) {\n        throw new Error(`No schema ${schema} registered for ${type}`);\n      }\n\n      options = this.schemas[type][schema];\n    }\n\n    const overrideType = isDynamicType ? type.type : type;\n    if (overrideSchemaOptions[overrideType]) {\n      // Merge default (registered) options and extra options into new options object\n      options = { ...options, ...overrideSchemaOptions[overrideType] };\n    }\n\n    return new Promise((resolve, reject) => {\n      /**\n       * Non-blocking serialization using the immediate queue.\n       *\n       * @see {@link https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/}\n       */\n      function next() {\n        setImmediate(() => {\n          if (excludeData) {\n            return resolve();\n          }\n          if (i >= arrayData.length) {\n            return resolve(serializedData);\n          }\n\n          try {\n            // Serialize a single item of the data-array.\n            const serializedItem = isDynamicType\n              ? that.serializeMixedResource(\n                  type,\n                  arrayData[i],\n                  included,\n                  extraData,\n                  overrideSchemaOptions\n                )\n              : that.serializeResource(\n                  type,\n                  arrayData[i],\n                  options,\n                  included,\n                  extraData,\n                  overrideSchemaOptions\n                );\n\n            if (serializedItem !== null) {\n              serializedData.push(serializedItem);\n            }\n\n            i += 1;\n\n            return next();\n          } catch (e) {\n            return reject(e);\n          }\n        });\n      }\n\n      next();\n    }).then((result) => {\n      let dataProperty;\n\n      if (typeof result === 'undefined') {\n        dataProperty = undefined;\n      } else if (isDataArray) {\n        dataProperty = result;\n      } else {\n        dataProperty = result[0] || null;\n      }\n\n      return {\n        jsonapi: options.jsonapiObject ? { version: '1.0' } : undefined,\n        meta: this.processOptionsValues(data, extraData, options.topLevelMeta, 'extraData'),\n        links: this.processOptionsValues(data, extraData, options.topLevelLinks, 'extraData'),\n        // If the source data was an array, we just pass the serialized data array.\n        // Otherwise we try to take the first (and only) item of it or pass null.\n        data: dataProperty,\n        included: included.size ? [...included.values()] : undefined,\n      };\n    });\n  }\n\n  /**\n   * Deserialize JSON API document data.\n   * Input data can be a simple object or an array of objects.\n   *\n   * @function JSONAPISerializer#deserialize\n   * @param {string|object} type resource's type as string or an object with a dynamic type resolved from data.\n   * @param {object} data JSON API input data.\n   * @param {string} [schema='default'] resource's schema name.\n   * @returns {object} deserialized data.\n   */\n  deserialize(type, data, schema) {\n    schema = schema || 'default';\n\n    if (typeof type === 'object') {\n      type = validateDynamicTypeOptions(type);\n    } else {\n      if (!this.schemas[type]) {\n        throw new Error(`No type registered for ${type}`);\n      }\n\n      if (schema && !this.schemas[type][schema]) {\n        throw new Error(`No schema ${schema} registered for ${type}`);\n      }\n    }\n\n    let deserializedData = {};\n\n    if (data.data) {\n      deserializedData = Array.isArray(data.data)\n        ? data.data.map((resource) =>\n            this.deserializeResource(type, resource, schema, data.included)\n          )\n        : this.deserializeResource(type, data.data, schema, data.included);\n    }\n\n    return deserializedData;\n  }\n\n  /**\n   * Asynchronously Deserialize JSON API document data.\n   * Input data can be a simple object or an array of objects.\n   *\n   * @function JSONAPISerializer#deserializeAsync\n   * @param {string|object} type resource's type as string or an object with a dynamic type resolved from data.\n   * @param {object} data JSON API input data.\n   * @param {string} [schema='default'] resource's schema name.\n   * @returns {Promise} resolves with serialized data.\n   */\n  deserializeAsync(type, data, schema) {\n    schema = schema || 'default';\n\n    if (typeof type === 'object') {\n      type = validateDynamicTypeOptions(type);\n    } else {\n      if (!this.schemas[type]) {\n        throw new Error(`No type registered for ${type}`);\n      }\n\n      if (schema && !this.schemas[type][schema]) {\n        throw new Error(`No schema ${schema} registered for ${type}`);\n      }\n    }\n\n    const isDataArray = Array.isArray(data.data);\n    let i = 0;\n    const arrayData = isDataArray ? data.data : [data.data];\n    const deserializedData = [];\n    const that = this;\n\n    return new Promise((resolve, reject) => {\n      /**\n       * Non-blocking deserialization using the immediate queue.\n       *\n       * @see {@link https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/}\n       */\n      function next() {\n        setImmediate(() => {\n          if (i >= arrayData.length) {\n            return resolve(isDataArray ? deserializedData : deserializedData[0]);\n          }\n\n          try {\n            // Serialize a single item of the data-array.\n            const deserializedItem = that.deserializeResource(\n              type,\n              arrayData[i],\n              schema,\n              data.included\n            );\n\n            deserializedData.push(deserializedItem);\n\n            i += 1;\n\n            return next();\n          } catch (e) {\n            return reject(e);\n          }\n        });\n      }\n\n      next();\n    });\n  }\n\n  /**\n   * Serialize any error into a JSON API error document.\n   * Input data can be:\n   *  - An Error or an array of Error.\n   *  - A JSON API error object or an array of JSON API error object.\n   *\n   * @see {@link http://jsonapi.org/format/#errors}\n   * @function JSONAPISerializer#serializeError\n   * @param {Error|Error[]|object|object[]} error an Error, an array of Error, a JSON API error object, an array of JSON API error object.\n   * @returns {Promise} resolves with serialized error.\n   */\n  serializeError(error) {\n    /**\n     * An Error object enhanced with status or/and custom code properties.\n     *\n     * @typedef {Error} ErrorWithStatus\n     * @property {string} [status] status code error\n     * @property {string} [code] code error\n     */\n\n    /**\n     * @private\n     * @param {Error|ErrorWithStatus|object} err an Error, a JSON API error object or an ErrorWithStatus.\n     * @returns {object} valid JSON API error.\n     */\n    function convertToError(err) {\n      let serializedError;\n\n      if (err instanceof Error) {\n        const status = err.status || err.statusCode;\n\n        serializedError = {\n          status: status && status.toString(),\n          code: err.code,\n          title: err.title || err.constructor.name,\n          detail: err.message,\n        };\n      } else {\n        serializedError = validateError(err);\n      }\n\n      return serializedError;\n    }\n\n    return {\n      errors: Array.isArray(error)\n        ? error.map((err) => convertToError(err))\n        : [convertToError(error)],\n    };\n  }\n\n  /**\n   * Deserialize a single JSON API resource.\n   * Input data must be a simple object.\n   *\n   * @function JSONAPISerializer#deserializeResource\n   * @param {string|object} type resource's type as string or an object with a dynamic type resolved from data.\n   * @param {object} data JSON API resource data.\n   * @param {string} [schema='default'] resource's schema name.\n   * @param {Map<string, object>} included Included resources.\n   * @param {string[]} lineage resource identifiers already deserialized to prevent circular references.\n   * @returns {object} deserialized data.\n   */\n  deserializeResource(type, data, schema = 'default', included, lineage = []) {\n    if (typeof type === 'object') {\n      type = typeof type.type === 'function' ? type.type(data) : get(data, type.type);\n    }\n\n    if (!type) {\n      throw new Error(`No type can be resolved from data: ${JSON.stringify(data)}`);\n    }\n\n    if (!this.schemas[type]) {\n      throw new Error(`No type registered for ${type}`);\n    }\n\n    const options = this.schemas[type][schema];\n\n    let deserializedData = {};\n    deserializedData[options.id] = data.id || undefined;\n\n    if (data.attributes && options.whitelistOnDeserialize.length) {\n      data.attributes = pick(data.attributes, options.whitelistOnDeserialize);\n    }\n\n    if (data.attributes && options.blacklistOnDeserialize.length) {\n      data.attributes = omit(data.attributes, options.blacklistOnDeserialize);\n    }\n\n    Object.assign(deserializedData, data.attributes);\n\n    // Deserialize relationships\n    if (data.relationships) {\n      Object.keys(data.relationships).forEach((relationshipProperty) => {\n        const relationship = data.relationships[relationshipProperty];\n\n        const relationshipKey = options.unconvertCase\n          ? this._convertCase(relationshipProperty, options.unconvertCase)\n          : relationshipProperty;\n\n        const relationshipOptions = options.relationships[relationshipKey];\n\n        const deserializeFunction = (relationshipData) => {\n          if (relationshipOptions && relationshipOptions.deserialize) {\n            return relationshipOptions.deserialize(relationshipData);\n          }\n          return relationshipData.id;\n        };\n\n        if (relationship.data !== undefined) {\n          if (relationship.data === null) {\n            // null data\n            set(\n              deserializedData,\n              (relationshipOptions && relationshipOptions.alternativeKey) || relationshipKey,\n              null\n            );\n          } else {\n            if ((relationshipOptions && relationshipOptions.alternativeKey) || !included) {\n              set(\n                deserializedData,\n                (relationshipOptions && relationshipOptions.alternativeKey) || relationshipKey,\n                Array.isArray(relationship.data)\n                  ? relationship.data.map((d) => deserializeFunction(d))\n                  : deserializeFunction(relationship.data)\n              );\n            }\n\n            if (included) {\n              const deserializeIncludedRelationship = (relationshipData) => {\n                const lineageCopy = [...lineage];\n                // Prevent circular relationships\n                const lineageKey = `${relationshipData.type}-${relationshipData.id}`;\n                const isCircular = lineageCopy.includes(lineageKey);\n\n                if (isCircular) {\n                  return deserializeFunction(relationshipData);\n                }\n\n                lineageCopy.push(lineageKey);\n                return this.deserializeIncluded(\n                  relationshipData.type,\n                  relationshipData.id,\n                  relationshipOptions,\n                  included,\n                  lineageCopy\n                );\n              };\n\n              set(\n                deserializedData,\n                relationshipKey,\n                Array.isArray(relationship.data)\n                  ? relationship.data.map((d) => deserializeIncludedRelationship(d))\n                  : deserializeIncludedRelationship(relationship.data)\n              );\n            }\n          }\n        }\n      });\n    }\n\n    if (options.unconvertCase) {\n      deserializedData = this._convertCase(deserializedData, options.unconvertCase);\n    }\n\n    if (data.links) {\n      deserializedData.links = data.links;\n    }\n\n    if (data.meta) {\n      deserializedData.meta = data.meta;\n    }\n\n    if (options.afterDeserialize) {\n      return options.afterDeserialize(deserializedData);\n    }\n\n    return deserializedData;\n  }\n\n  deserializeIncluded(type, id, relationshipOpts, included, lineage) {\n    const includedResource = included.find(\n      (resource) => resource.type === type && resource.id === id\n    );\n\n    if (!includedResource) {\n      return id;\n    }\n\n    return this.deserializeResource(\n      type,\n      includedResource,\n      relationshipOpts.schema,\n      included,\n      lineage\n    );\n  }\n\n  /**\n   * Serialize resource objects.\n   *\n   * @see {@link http://jsonapi.org/format/#document-resource-objects}\n   * @function JSONAPISerializer#serializeDocument\n   * @private\n   * @param {string} type resource's type.\n   * @param {object|object[]} data input data.\n   * @param {object} options resource's configuration options.\n   * @param {Map<string, object>} [included] Included resources.\n   * @param {object} [extraData] additional data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {object|object[]} serialized data.\n   */\n  serializeResource(type, data, options, included, extraData, overrideSchemaOptions = {}) {\n    if (isEmpty(data)) {\n      // Return [] or null\n      return Array.isArray(data) ? data : null;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map((d) =>\n        this.serializeResource(type, d, options, included, extraData, overrideSchemaOptions)\n      );\n    }\n\n    if (options.beforeSerialize) {\n      data = options.beforeSerialize(data);\n    }\n\n    return {\n      type,\n      id: data[options.id] ? data[options.id].toString() : undefined,\n      attributes: this.serializeAttributes(data, options),\n      relationships: this.serializeRelationships(\n        data,\n        options,\n        included,\n        extraData,\n        overrideSchemaOptions\n      ),\n      meta: this.processOptionsValues(data, extraData, options.meta),\n      links: this.processOptionsValues(data, extraData, options.links),\n    };\n  }\n\n  /**\n   * Serialize mixed resource object with a dynamic type resolved from data\n   *\n   * @see {@link http://jsonapi.org/format/#document-resource-objects}\n   * @function JSONAPISerializer#serializeMixedResource\n   * @private\n   * @param {object} typeOption a dynamic type options.\n   * @param {object|object[]} data input data.\n   * @param {Map<string, object>} [included] Included resources.\n   * @param {object} [extraData] additional data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {object|object[]} serialized data.\n   */\n  serializeMixedResource(typeOption, data, included, extraData, overrideSchemaOptions = {}) {\n    if (isEmpty(data)) {\n      // Return [] or null\n      return Array.isArray(data) ? data : null;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map((d) =>\n        this.serializeMixedResource(typeOption, d, included, extraData, overrideSchemaOptions)\n      );\n    }\n\n    // Resolve type from data (can be a string or a function deriving a type-string from each data-item)\n    const type =\n      typeof typeOption.type === 'function' ? typeOption.type(data) : get(data, typeOption.type);\n\n    if (!type) {\n      throw new Error(`No type can be resolved from data: ${JSON.stringify(data)}`);\n    }\n\n    if (!this.schemas[type]) {\n      throw new Error(`No type registered for ${type}`);\n    }\n\n    let options = this.schemas[type].default;\n    if (overrideSchemaOptions[type]) {\n      // Merge default (registered) options and extra options into new options object\n      options = { ...options, ...overrideSchemaOptions[type] };\n    }\n\n    return this.serializeResource(type, data, options, included, extraData, overrideSchemaOptions);\n  }\n\n  /**\n   * Serialize 'attributes' key of resource objects: an attributes object representing some of the resource's data.\n   *\n   * @see {@link http://jsonapi.org/format/#document-resource-object-attributes}\n   * @function JSONAPISerializer#serializeAttributes\n   * @private\n   * @param {object|object[]} data input data.\n   * @param {object} options resource's configuration options.\n   * @returns {object} serialized attributes.\n   */\n  serializeAttributes(data, options) {\n    if (options.whitelist && options.whitelist.length) {\n      data = pick(data, options.whitelist);\n    }\n\n    // Support alternativeKey options for relationships\n    const alternativeKeys = [];\n    Object.keys(options.relationships).forEach((key) => {\n      const rOptions = options.relationships[key];\n      if (rOptions.alternativeKey) {\n        alternativeKeys.push(rOptions.alternativeKey);\n      }\n    });\n\n    // Remove unwanted keys\n    let serializedAttributes = omit(data, [\n      options.id,\n      ...Object.keys(options.relationships),\n      ...alternativeKeys,\n      ...options.blacklist,\n    ]);\n\n    if (options.convertCase) {\n      serializedAttributes = this._convertCase(serializedAttributes, options.convertCase);\n    }\n\n    return Object.keys(serializedAttributes).length ? serializedAttributes : undefined;\n  }\n\n  /**\n   * Serialize 'relationships' key of resource objects: a relationships object describing relationships between the resource and other JSON API resources.\n   *\n   * @see {@link http://jsonapi.org/format/#document-resource-object-relationships}\n   * @function JSONAPISerializer#serializeRelationships\n   * @private\n   * @param {object|object[]} data input data.\n   * @param {object} options resource's configuration options.\n   * @param {Map<string, object>} [included]  Included resources.\n   * @param {object} [extraData] additional data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {object} serialized relationships.\n   */\n  serializeRelationships(data, options, included, extraData, overrideSchemaOptions = {}) {\n    const serializedRelationships = {};\n\n    Object.keys(options.relationships).forEach((relationship) => {\n      const relationshipOptions = options.relationships[relationship];\n\n      // Support alternativeKey options for relationships\n      let relationshipKey = relationship;\n      if (!data[relationship] && relationshipOptions.alternativeKey) {\n        relationshipKey = relationshipOptions.alternativeKey;\n      }\n\n      const serializeRelationship = {\n        links: this.processOptionsValues(data, extraData, relationshipOptions.links),\n        meta: this.processOptionsValues(data, extraData, relationshipOptions.meta),\n        data: this.serializeRelationship(\n          relationshipOptions.type,\n          relationshipOptions.schema,\n          get(data, relationshipKey),\n          included,\n          data,\n          extraData,\n          overrideSchemaOptions\n        ),\n      };\n\n      if (\n        serializeRelationship.data !== undefined ||\n        serializeRelationship.links !== undefined ||\n        serializeRelationship.meta !== undefined\n      ) {\n        // Convert case\n        relationship = options.convertCase\n          ? this._convertCase(relationship, options.convertCase)\n          : relationship;\n\n        serializedRelationships[relationship] = serializeRelationship;\n      }\n    });\n\n    return Object.keys(serializedRelationships).length ? serializedRelationships : undefined;\n  }\n\n  /**\n   * Serialize 'data' key of relationship's resource objects.\n   *\n   * @see {@link http://jsonapi.org/format/#document-resource-object-linkage}\n   * @function JSONAPISerializer#serializeRelationship\n   * @private\n   * @param {string|Function} rType the relationship's type.\n   * @param {string} rSchema the relationship's schema\n   * @param {object|object[]} rData relationship's data.\n   * @param {Map<string, object>} [included] Included resources.\n   * @param {object} [data] the entire resource's data.\n   * @param {object} [extraData] additional data.\n   * @param {object} [overrideSchemaOptions=] additional schema options, a map of types with options to override\n   * @returns {object|object[]} serialized relationship data.\n   */\n  serializeRelationship(\n    rType,\n    rSchema,\n    rData,\n    included,\n    data,\n    extraData,\n    overrideSchemaOptions = {}\n  ) {\n    included = included || new Map();\n    const schema = rSchema || 'default';\n\n    // No relationship data\n    if (rData === undefined || rData === null) {\n      return rData;\n    }\n\n    if (typeof rData === 'object' && isEmpty(rData)) {\n      // Return [] or null\n      return Array.isArray(rData) ? [] : null;\n    }\n\n    if (Array.isArray(rData)) {\n      return rData.map((d) =>\n        this.serializeRelationship(\n          rType,\n          schema,\n          d,\n          included,\n          data,\n          extraData,\n          overrideSchemaOptions\n        )\n      );\n    }\n\n    // Resolve relationship type\n    const type = typeof rType === 'function' ? rType(rData, data) : rType;\n\n    if (!type) {\n      throw new Error(`No type can be resolved from relationship's data: ${JSON.stringify(rData)}`);\n    }\n\n    if (!this.schemas[type]) {\n      throw new Error(`No type registered for \"${type}\"`);\n    }\n\n    if (!this.schemas[type][schema]) {\n      throw new Error(`No schema \"${schema}\" registered for type \"${type}\"`);\n    }\n\n    let rOptions = this.schemas[type][schema];\n\n    if (overrideSchemaOptions[type]) {\n      // Merge default (registered) options and extra options into new options object\n      rOptions = { ...rOptions, ...overrideSchemaOptions[type] };\n    }\n\n    const serializedRelationship = { type };\n\n    // Support for unpopulated relationships (an id, or array of ids)\n    if (!isObjectLike(rData)) {\n      serializedRelationship.id = rData.toString();\n    } else {\n      const serializedIncluded = this.serializeResource(\n        type,\n        rData,\n        rOptions,\n        included,\n        extraData,\n        overrideSchemaOptions\n      );\n\n      serializedRelationship.id = serializedIncluded.id;\n      const identifier = `${type}-${serializedRelationship.id}`;\n\n      // Not include relationship object which only contains an id\n      if (serializedIncluded.attributes && Object.keys(serializedIncluded.attributes).length) {\n        // Merge relationships data if already included\n        if (included.has(identifier)) {\n          const alreadyIncluded = included.get(identifier);\n\n          if (serializedIncluded.relationships) {\n            alreadyIncluded.relationships = {\n              ...alreadyIncluded.relationships,\n              ...serializedIncluded.relationships,\n            };\n            included.set(identifier, alreadyIncluded);\n          }\n        } else {\n          included.set(identifier, serializedIncluded);\n        }\n      }\n    }\n    return serializedRelationship;\n  }\n\n  /**\n   * Process options values.\n   * Allows options to be an object or a function with 1 or 2 arguments\n   *\n   * @function JSONAPISerializer#processOptionsValues\n   * @private\n   * @param {object} data data passed to functions options.\n   * @param {object} extraData additional data passed to functions options.\n   * @param {object} options configuration options.\n   * @param {string} [fallbackModeIfOneArg] fallback mode if only one argument is passed to function.\n   * Avoid breaking changes with issue https://github.com/danivek/json-api-serializer/issues/27.\n   * @returns {object} processed options.\n   */\n  processOptionsValues(data, extraData, options, fallbackModeIfOneArg) {\n    let processedOptions = {};\n    if (options && typeof options === 'function') {\n      // Backward compatible with functions with one 'extraData' argument\n      processedOptions =\n        fallbackModeIfOneArg === 'extraData' && options.length === 1\n          ? options(extraData)\n          : options(data, extraData);\n    } else {\n      Object.keys(options).forEach((key) => {\n        let processedValue = {};\n        if (options[key] && typeof options[key] === 'function') {\n          // Backward compatible with functions with one 'extraData' argument\n          processedValue =\n            fallbackModeIfOneArg === 'extraData' && options[key].length === 1\n              ? options[key](extraData)\n              : options[key](data, extraData);\n        } else {\n          processedValue = options[key];\n        }\n        Object.assign(processedOptions, { [key]: processedValue });\n      });\n    }\n\n    return processedOptions && Object.keys(processedOptions).length ? processedOptions : undefined;\n  }\n\n  /**\n   * Recursively convert object keys case\n   *\n   * @function JSONAPISerializer#_convertCase\n   * @private\n   * @param {object|object[]|string} data to convert\n   * @param {string} convertCaseOptions can be snake_case', 'kebab-case' or 'camelCase' format.\n   * @returns {object} Object with it's keys converted as per the convertCaseOptions\n   */\n  _convertCase(data, convertCaseOptions) {\n    if (Array.isArray(data)) {\n      return data.map((item) => {\n        if (item && (Array.isArray(item) || isPlainObject(item))) {\n          return this._convertCase(item, convertCaseOptions);\n        }\n        return item;\n      });\n    }\n\n    if (isPlainObject(data)) {\n      return transform(\n        data,\n        (result, value, key) => {\n          let converted;\n          if (value && (Array.isArray(value) || isPlainObject(value))) {\n            converted = this._convertCase(value, convertCaseOptions);\n          } else {\n            converted = value;\n          }\n\n          result[this._convertCase(key, convertCaseOptions)] = converted;\n          return result;\n        },\n        {}\n      );\n    }\n\n    if (typeof data === 'string') {\n      let converted;\n\n      switch (convertCaseOptions) {\n        case 'snake_case':\n          converted = this.convertCaseMap.snakeCase.get(data);\n          if (!converted) {\n            converted = toSnakeCase(data);\n            this.convertCaseMap.snakeCase.set(data, converted);\n          }\n          break;\n        case 'kebab-case':\n          converted = this.convertCaseMap.kebabCase.get(data);\n          if (!converted) {\n            converted = toKebabCase(data);\n            this.convertCaseMap.kebabCase.set(data, converted);\n          }\n          break;\n        case 'camelCase':\n          converted = this.convertCaseMap.camelCase.get(data);\n          if (!converted) {\n            converted = toCamelCase(data);\n            this.convertCaseMap.camelCase.set(data, converted);\n          }\n          break;\n        default: // Do nothing\n      }\n\n      return converted;\n    }\n\n    return data;\n  }\n};\n"],"names":["global","undefined","setImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","setTimeout","toString","call","process","handle","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","data","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","Math","random","source","indexOf","slice","length","addEventListener","attachEvent","callback","Function","args","Array","arguments","i","task","clearImmediate","apply","run","self","this","Node","key","previous","next","get","obj","path","defaultValue","result","String","prototype","split","filter","Boolean","reduce","res","set","value","isArray","match","a","c","abs","pick","arr","acc","curr","isEmpty","val","keys","omit","k","includes","isPlainObject","_typeof","constructor","isObjectLike","transform","fn","toKebabCase","str","map","x","toLowerCase","join","toSnakeCase","toCamelCase","s","toUpperCase","LRU","capacity","Infinity","head","tail","node","_moveFirst","id","_removeLast","_add","_remove","require$$1","validateOptions","options","blacklist","whitelist","links","relationships","topLevelLinks","topLevelMeta","meta","blacklistOnDeserialize","whitelistOnDeserialize","jsonapiObject","Error","convertCase","unconvertCase","beforeSerialize","afterDeserialize","forEach","schema","type","alternativeKey","deserialize","validateDynamicTypeOptions","validateError","err","status","code","title","detail","error","linksObj","href","isValidLink","sourceObj","pointer","parameter","isValidSource","opts","schemas","convertCaseCacheSize","convertCaseMap","camelCase","kebabCase","snakeCase","extraData","excludeData","overrideSchemaOptions","included","Map","isDynamicType","dataProperty","overrideType","serializeMixedResource","serializeResource","jsonapi","version","processOptionsValues","size","values","isDataArray","arrayData","serializedData","that","Promise","resolve","reject","serializedItem","push","e","then","_this","deserializedData","resource","_this2","deserializeResource","deserializedItem","convertToError","serializedError","statusCode","name","message","errors","lineage","JSON","stringify","attributes","assign","relationshipProperty","relationship","relationshipKey","_this3","_convertCase","relationshipOptions","deserializeFunction","relationshipData","d","deserializeIncludedRelationship","lineageCopy","lineageKey","deserializeIncluded","relationshipOpts","includedResource","find","_this4","serializeAttributes","serializeRelationships","typeOption","_this5","alternativeKeys","rOptions","serializedAttributes","serializedRelationships","serializeRelationship","_this6","rType","rSchema","rData","_this7","serializedRelationship","serializedIncluded","identifier","has","alreadyIncluded","fallbackModeIfOneArg","processedOptions","processedValue","convertCaseOptions","item","_this8","converted"],"mappings":"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"}